#!/usr/bin/env bash
source "$DIR/utils/index"

info "Setup \033[0;37m[git]\033[0m"

if ! is_executable "git"; then
  fail_hard "Git is not installed, please install git first!"
fi

# setup id_rsa key
if [ ! -f "$SSH_DIR/id_rsa.pub" ]; then
  user "Enter your email for the SSH key:"
  read -e rsa_email

  # generate the key
  ssh-keygen -t rsa -f "$SSH_DIR/id_rsa" -b 4096 -C $rsa_email -N "" -q

  # starting the ssh-agent
  eval "$(ssh-agent -s)" > /dev/null

  # ask to register key
  cat "$SSH_DIR/id_rsa.pub"
  user "Copy the RSA public key to github/gitlab! Enter to continue."
  read -e _

  # register key
  if is_mac; then
    # create macOS specific configuration
    touch ~/.ssh/config
    echo -e "Host *\n  AddKeysToAgent yes\n  IgnoreUnknown AddKeysToAgent,UseKeychain\n  UseKeychain yes\n  IdentityFile $SSH_DIR/id_rsa" >> $SSH_DIR/config

    ssh-add -K $SSH_DIR/id_rsa > /dev/null
  else
    ssh-add $SSH_DIR/id_rsa > /dev/null
  fi

  success "SSH key successfully generated in $SSH_DIR"
else
  success "SSH key already setup, remove ~/.ssh to recreate"
fi

# setup gitconfig
if ! [ -f "$DIR/git/gitconfig.local.symlink" ]; then
  git_credential="cache"

  if is_mac; then
    git_credential="osxkeychain"
  fi

  # need git information
  user "Enter your git author name:"
  read -e git_authorname
  user "Enter your git author email:"
  read -e git_authoremail

  sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" "$DIR/git/gitconfig.local.symlink.example" > "$DIR/git/gitconfig.local.symlink"

  success "Git successfully configured"
else
  success "Git already configured, remove ~/.dotfiles/gitconfig.local.symlink to recreate"
fi

# setup GPG for signing git commits
if [ ! -d "$HOME/.gnupg" ]; then
  user "Generating GPG key, use same email as for git:"
  #Â generate key, prompts will appear
  gpg --default-new-key-algo rsa4096 --gen-key
  user "Copy and paste the generated GPG key ID:"
  read -e gpg_key
  gpg --armor --export $gpg_key
  user "Copy the GPG public key to github/gitlab! Enter to continue."
  read -e _

  # install and restart config
  git config --global gpg.program "$(which gpg)"
  echo "pinentry-program $(which pinentry-mac)" >> "$HOME/.gnupg/gpg-agent.conf"
  gpgconf --kill gpg-agent

  success "GPG key successfully setup"
else
  success "GPG key already configured, remove ~/.gnupg to recreate"
fi
